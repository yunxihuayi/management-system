1、浏览器是如何渲染页面的？
	当浏览器的网络线程收到HTML文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列，在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程；整个渲染流程分为：HTML解析、样式计算、布局、分层、绘制、分块、光栅化、画。

2、解析HTML - parse HTML
	为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载HTML和外部的CSS、JS文件；
	如果渲染主线程解析到link位置，此时外部的CSS文件还没有下载解析好，渲染主线程不会等待，继续解析后续的HTML，这是因为下载和解析CSS的工作是在预解析线程中进行的，这就是CSS不会阻塞HTML解析的根本原因；
	如果渲染主线程解析到script位置，会停止解析HTML，转而等待JS文件下载好，并将全局JS代码解析执行完成后，才能继续解析HTML。这是因为JS代码的执行过程可能会修改当前的DOM树，DOM树是一边解析一边生成，所以DOM树的生成必须暂停；这就是JS会阻塞HTML解析的根本原因；
	解析完成后，会得到DOM（document object model）树和CSSOM（CSS object model）树，浏览器的默认样式、内部样式、外部样式、行内样式都包含在CSSOM树中。

3、样式计算 - Recalculate Style
	目的是为了得到每个节点的最终样式。
	渲染主线程会遍历得到的DOM树，根据CSSOM树中样式，依次为DOM树中的每个节点计算出最终样式，从而形成一个新的包含最终样式的DOM树。
	在这过程中，很多预设值会变成绝对值，比如color:red会变为color:rgb(255,0,0)；相对单位变为绝对单位，font-size:2em会变成font-size:24px

4、布局 - Layout
	渲染主线程依次遍历DOM树的每一个节点，计算每个节点的几何信息；例如节点的宽高、相对包含块的位置；
	布局树与DOM树并非一一对应，比如display:none的节点没有几何信息，因此不会生成到布局树中；又比如使用了伪元素选择器，虽然DOM树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等，都会导致布局树和DOM树无法一一对应；

5、分层 - Layer
	渲染主线程会使用一套复杂的策略对整个布局树进行分层；分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率；比如滚动条、堆叠上下文、transform、opacity等样式都会影响分层结果，也可以通过will-change属性更大程度的影响分层结果。

6、绘制 - Paint
	渲染主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来；
	比如绘制指令：将笔移动到10,30位置，画一个200*300的矩形，用红色填充矩形。
绘制完成后，渲染主线程的工作到此为止，剩余渲染步骤交给其他线程完成。

7、分块 - Tiling
	渲染主线程会将每个图层的回执信息提交给合成线程（渲染进程中），剩余工作将由合成线程来完成；合成线程首先对每个图层进行分块，将其划分为更多的小区域，合成线程会从线程池中拿出多个线程来完成分块工作。

8、光栅化 - Raster
	光栅化是将每个块变成位图，优先处理靠近视口的块。
	分块完成后，合成线程会将块信息交给GPU进程，以极高的速度完成光栅化，GPU进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。
	光栅化的结果，就是一块一块的位图。

9、画 - draw
	合成线程拿到每个层、每个块的位图后，生成一个个指引信息；指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形；变形发生在合成线程中，与渲染主线程无关，这就是transform效率高的本质原因；合成线程会把指引信息提交给GPU进程，由GPU进程产生系统调用，提交给GPU硬件，完成最终的屏幕成像。

10、什么是reflow?
	reflow的本质就是重新计算layout树，当进行了会影响布局树的操作后，需要重新计算布局树，会引发layout，为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当JS代码全部完成后再进行统一计算，所以改动属性造成的reflow是异步完成的。也同样因为如此，当JS获取布局属性时，就可能造成无法获取到最新的布局信息，浏览器在反复权衡下，最终决定获取属性立即reflow。

11、什么是repaint?
	repaint的本质就是重新根据分层信息计算了绘制指令；当改动了可见样式后，就需要重新计算，会引发repaint；由于元素的布局信息也属于可见样式，所以reflow一定会引起repaint。

12、为什么transform的效率高？
	因为transform既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个draw阶段，由于draw是在合成线程中，所以transform的变化几乎不会影响渲染主线程，反之渲染主线程无论如何忙碌，也不会影响transform的变化。

