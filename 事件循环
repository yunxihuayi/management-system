1、浏览器有哪些进程或线程？
  浏览器是一个多进程多线程的应用程序；
  进程主要有浏览器进程，网络进程，渲染进程等，每个进程都有一块独立的内存空间，不会互相影响（可通过任务管理器查看，一个标签页一个渲染进程）；
  浏览器进程：主要负责界面显示、用户交互、子进程管理等，浏览器进程内部会启动多个线程处理不同的任务；
  网络进程：负责加载网络资源；网络进程内部会启动多个线程来处理不同的网络任务；
  渲染进程：渲染进程启动后，会开启一个渲染主线程，主线程负责执行HTML、CSS、JS代码；默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不相互影响。

2、渲染主线程是如何工作的？
  处理任务包括但不限于：解析HTML、解析CSS、计算样式、布局、处理图层、画页面、执行全局JS代码、执行事件处理函数、执行计时器的回调函数等
  使用消息队列（message queue）来调度：
    在最开始的时候，渲染主线程会进入一个无线循环；
    每一次循环会检查消息队列中是否有任务存在；如果有，就取出第一个任务执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态；
    其他所有线程（包括其他进程的线程）可以随时向消息队列中添加任务，新任务会加到消息队列的末尾，在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务；
    以上整个过程，被称之为事件循环（消息循环）。

3、异步任务
  计时完成后需要执行的任务--setTimeout、setInterval
  网络通信完成后需要执行的任务--XHR、Fetch
  用户操作后需要执行的任务 -- addEventListener
  如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处理阻塞状态，从而导致浏览器卡死，为了避免这种情况，浏览器选择异步来解决这个问题。

4、如何理解JS异步？
  JS是一门单线程的语言，这是因为它运行在渲染主线程中，而渲染主线程只有一个。
  渲染主线程承担着诸多的工作，渲染页面，执行JS等都在其中；如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行；这样一来，一方面会导致繁忙的渲染主线程浪费时间，另一方面导致页面无法及时更新，给用户造成卡死现象；
  所以浏览器采用异步的方式来避免，具体做法是当某些任务发生时，比如计时器、网络、事件监听等，渲染主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码；当交给的其他线程任务完成时，将事先传递的回调函数包装成任务，加入到消息队列末尾排队，等到渲染主线程的调度执行。
  在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了浏览器的流畅运行。

5、优先级
  任务没有优先级，在消息队列中先进先出；
  消息队列有优先级：每个任务都有一个任务类型，同一个类型的任务必须在一个队列中，不同类型的任务可以分属不同的队列；在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行。
  在Chrome的实现中，微队列 > 交互队列 > 延时队列 > ...
  微队对列：用于存放需要最快执行的任务，如Promise、MutationObserver；Promise.resolve().then(函数)
  交互队列：用于存放用户操作后产生的事件处理任务；
  延时队列：用于存放计时器到达后的回调任务；

6、阐述一下JS的事件循环
  事件循环又叫做消息循环，是浏览器渲染主线程的工作方式；
  在Chromede的源码中，它开启一个不会结束的for循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到消息队列末尾即可；
  过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式；
  根据W3C官方解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列；不同任务有不同的优先级，在一次事件循环中，由浏览器自行决定拿取哪一个队列的任务；但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。

7、JS中计时器能做到精确计时吗？
  不能，
  计算机硬件没有院原子钟，无法做到精确计时；
  因为操作系统计时函数本身就存在少量偏差，由于JS的计时器最终调用的是操作系统的函数，也就携带了这些偏差；
  按照W3C的标准，浏览器实现计时器时，如果嵌套层超过5层，则会带有4毫秒的最少时间，这样在计时时间少于4毫秒又带来了偏差；
  受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差。
